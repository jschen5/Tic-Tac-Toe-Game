import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;




import java.util.ArrayList;

public class Board extends JPanel {

	//board representation char[x][y]
	//valid symbols: x, o, n (n = none)

	public static final int dim = 3;	//dimension of square board
	public static final int BOARDX = 400;
	public static final int BOARDY = 400;

	private char playerMark;
	private char aiMark;

	private char[][] board;
	private ArrayList<Move> possibleMoves;	//all moves in possibleMoves will have mark 'n'
	private ArrayList<Move> pastMoves;	//all moves in pastMoves will have marks corresponding to the move maker

	private int currentX;
	private int currentY;

	private static int turn;	//Player: 0 , AI: 1


	public Board() {
		board = new char[dim][dim];
		possibleMoves = new ArrayList<Move>();
		pastMoves = new ArrayList<Move>();
		addKeyListener(new TKeyAdapter());
		addMouseListener(new TMouseAdapter());

		playerMark = 'o';
		aiMark = 'x';

		turn = (int) (Math.random()*2);

		resetBoard();
	}



	//////////////////////////////
	///////Graphics Methods///////
	//////////////////////////////

	public void paintComponent(Graphics g) {

		super.paintComponent(g);

		Graphics2D g2d = (Graphics2D) g;

		int w = getWidth();
		int h = getHeight();

		RenderingHints rh =
				new RenderingHints(RenderingHints.KEY_ANTIALIASING,
						RenderingHints.VALUE_ANTIALIAS_ON);

		rh.put(RenderingHints.KEY_RENDERING,
				RenderingHints.VALUE_RENDER_QUALITY);

		g2d.setRenderingHints(rh);

		for (int i = 0; i < 3; i++) {
			g2d.drawLine(0, i*h/3, w, i*h/3);
			g2d.drawLine(i*w/3, 0, i*w/3, h);
		}

		for (int i = 0; i < pastMoves.size(); i++) {
			Move workItem = pastMoves.get(i);

			if (workItem.getMark() == 'x') {
				int startX = workItem.getX()*w/3 + w/27;
				int startY = workItem.getY()*h/3 + h/27;
				g2d.draw(new Line2D.Double(startX, startY, startX + w/3-w/14.5, startY + h/3-h/14.5));
				g2d.draw(new Line2D.Double(startX + w/3-w/14.5, startY, startX, startY + h/3-h/14.5));
			}

			if (workItem.getMark() == 'o') {
				int centerX = workItem.getX()*w/3 + w/27;
				int centerY = workItem.getY()*h/3 + h/27;
				g2d.draw(new Ellipse2D.Double(centerX, centerY, w/3-w/14.5, h/3-h/14.5));
			}
		}

	}



	class TKeyAdapter extends KeyAdapter {

		public void keyPressed(KeyEvent e) {

			currentX = possibleMoves.get(0).getX();
			currentY = possibleMoves.get(0).getY();

			int keycode = e.getKeyCode();

			switch (keycode) {
			case KeyEvent.VK_LEFT:
				break;
			case KeyEvent.VK_RIGHT:
				break;
			case KeyEvent.VK_DOWN:
				break;
			case KeyEvent.VK_UP:
				break;
			case KeyEvent.VK_SPACE:
				break;
			case 'd':
				break;
			case 'D':
				break;
			}
		}
	}

	class TMouseAdapter extends MouseAdapter {

		int nextMvX = 0;
		int nextMvY = 0;

		public void mousePressed(MouseEvent event) {

			if (turn == 0) {
				if (event.getButton() == MouseEvent.BUTTON1) {

					int mouseX = event.getX();
					int mouseY = event.getY();

					if (mouseX < BOARDX/3) {
						nextMvX = 0;
					} else if (mouseX > 2*BOARDX/3) {
						nextMvX = 2;
					} else {
						nextMvX = 1;
					}

					if (mouseY < BOARDY/3) {
						nextMvY = 0;
					} else if (mouseY > 2*BOARDY/3) {
						nextMvY = 2;
					} else {
						nextMvY = 1;
					}

					Move nextMv = new Move(nextMvX, nextMvY);
					if (possibleMoves.indexOf(nextMv) != -1) {
						nextMv.setMark(playerMark);
						update(nextMv);
						turn++;
					}

				}
			}
		}

	}





	//////////////////////////////
	///////Gameplay Methods///////
	//////////////////////////////

	public void resetBoard() {
		fillBoardWith(board, 'n');
		//fill availableMoves with all possible moves
		possibleMoves.clear();
		pastMoves.clear();
		for (int i = 0; i < Board.dim; i++) {
			for (int k = 0; k < Board.dim; k++) {
				possibleMoves.add(new Move(i, k));
			}
		}
	}


	public int update(Move mv) {
		//can probably remove this check since only available/valid moves will be in arraylist
		if (canMove(mv)) {
			char origMark = mv.getMark();
			board[mv.getX()][mv.getY()] = origMark;
			pastMoves.add(mv);
			mv.setMark('n');
			possibleMoves.remove(mv);
			mv.setMark(origMark);	//set mark back to original player mark for undoMove(), otherwise move never used again
			repaint();
			return 1;
		}
		return 0;
	}

	public void undoMove(Move mv) {
		board[mv.getX()][mv.getY()] = 'n';
		pastMoves.remove(mv);
		mv.setMark('n');
		possibleMoves.add(mv);
	}

	public char victConfig() {

		char[][] boardT = transpose(board);

		for (int i = 0; i < dim; i++) {
			String column = new String(board[i]);
			String row = new String(boardT[i]);
			if (column.equals("xxx") || column.equals("ooo")) {
				return column.charAt(0);
			}
			if (row.equals("xxx") || row.equals("ooo")) {
				return row.charAt(0);
			}
		}

		if (((board[0][0] == board[1][1]) && (board[1][1] == board[2][2])) || 
				((board[2][0] == board[1][1]) && (board[1][1] == board[0][2]))) {
			if ((board[1][1] == 'x') || (board[1][1] == 'o')) {
				return board[1][1];
			}
		}

		return 'n';
	}


	///////////////////////////
	///////Basic Methods///////
	///////////////////////////

	public boolean equals(Object obj) {	//two boards with the same 2D array representation must be the same board
		Board bd = (Board) obj;
		for (int i = 0; i < Board.dim; i++) {
			for (int k = 0; k < Board.dim; k++) {
				if (this.board[i][k] != bd.board[i][k]) {
					return false;
				}
			}
		}
		for (int i = 0; i < this.possibleMoves.size(); i++) {
			if (!this.possibleMoves.contains(bd.possibleMoves.get(i))) {
				return false;
			}
		}
		for (int i = 0; i < this.pastMoves.size(); i++) {
			if (!this.pastMoves.contains(bd.pastMoves.get(i))) {
				return false;
			}
		}
		return true;
	}


	public Board clone() {
		Board clone = new Board();
		for (int i = 0; i < Board.dim; i++) {
			for (int k = 0; k < Board.dim; k++) {
				clone.board[i][k] = this.board[i][k];
			}
		}
		clone.possibleMoves.clear();
		for (int i = 0; i < this.possibleMoves.size(); i++) {
			clone.possibleMoves.add(this.possibleMoves.get(i).clone());
		}
		for (int i = 0; i < this.pastMoves.size(); i++) {
			clone.pastMoves.add(this.pastMoves.get(i).clone());
		}

		return clone;
	}



	////////////////////////////
	///////Getter Methods///////
	////////////////////////////

	public char[][] getBoard() {
		return board;
	}

	public ArrayList<Move> getPossibleMoves() {
		return possibleMoves;
	}

	public ArrayList<Move> getPastMoves() {
		return pastMoves;
	}


	////////////////////////////
	///////Helper Methods///////
	////////////////////////////

	public static void fillBoardWith(char[][] board, char symbol) {
		for (int i = 0; i < dim; i++) {
			for (int k = 0; k < dim; k++) {
				board[i][k] = symbol;
			}
		}
	}

	private boolean canMove(Move mv) {
		if (board[mv.getX()][mv.getY()] == 'n') {
			return true;
		}
		return false;
	}

	public static char[][] transpose(char[][] mtrx) {
		char[][] result = new char[dim][dim];
		for (int i = 0; i < dim; i++) {
			for (int k = 0; k < dim; k++) {
				result[k][i] = mtrx[i][k];
			}
		}
		return result;
	}



	public static void main (String args[]) {
		JFrame frame = new JFrame("TicTacToe");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		Board game = new Board();
		frame.add(game);
		frame.setSize(BOARDX, BOARDY);
		frame.setLocationRelativeTo(null);
		frame.setVisible(true);
		
		AI_Experienced Joe = new AI_Experienced("Joe", 'x', 'o', game);
		
		while (game.victConfig() == 'n') {
			if (turn == 1) {
				game.update(Joe.nextMove());
				turn--;
			}
		}
		
		//frame.removeAll();
		//frame.add(new Skeleton(game.victConfig()));

	}




}	//end of Board class
